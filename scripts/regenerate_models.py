import sys
import os
import json

# Add the src/ directory to sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))
print(sys.path)

from cold.ontology.importer import import_ontology_turtle
from cold.ontology.loader import load_ontology
from cold.ontology.extractor import extract_classes
from cold.ontology.formatter import format_ontology_ttl
from cold.models.generator import generate_pydantic_classes
from cold.utils.access import *


CLASSES_OUTPUT_DIR = "src/cold/models/autogenerated/"
TEMPLATE_PATH = "src/cold/models/templates/pydantic_template.jinja2"


def main():

    # Import ontology urls from json
    with open(os.path.join(get_path_to_ontology(), "urls.json"), 'r') as f:
        url_dict = json.load(f)

    for url_key in url_dict.keys():
        print("Processing {} ontology.".format(url_key))
        url = url_dict.get(url_key).get("url")
        original_file_name = url_dict.get(url_key).get("original_file_name")
        formatted_file_name = url_dict.get(url_key).get("formatted_file_name")

        original_file_path = os.path.join(get_path_to_ontology_files_originals(),original_file_name)
        formatted_file_path = os.path.join(get_path_to_ontology_files_formatted(),formatted_file_name)

        import_ontology_turtle(url, original_file_path)

        format_ontology_ttl(original_file_path, formatted_file_path)

        ontology = load_ontology(formatted_file_path)

        classes = extract_classes(ontology)

        generate_pydantic_classes(classes, TEMPLATE_PATH, CLASSES_OUTPUT_DIR)


if __name__ == "__main__":
    main()
