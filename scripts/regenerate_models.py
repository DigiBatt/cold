
import sys
import os

# Add the src/ directory to sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))
print(sys.path)

from cold.ontology.loader import load_ontology
from cold.ontology.extractor import extract_classes
from cold.models.generator import generate_pydantic_classes

ONTOLOGY_URL = "https://w3id.org/emmo/domain/battery/inferred" 
#ONTOLOGY_URL = r"C:\Users\simonc\Documents\Github-local\Ontologies\domain-electrochemistry\electrochemistry-inferred.ttl"
OUTPUT_DIR = "src/cold/models/autogenerated/"
TEMPLATE_PATH = "src/cold/models/templates/pydantic_template.jinja2"
#C:\Myenv\cold\src\cold\models\templates\pydantic_template.jinja2
#print("Current working directory:", os.getcwd())

# Required directories
REQUIRED_DIRECTORIES = [
    "src/cold/models/autogenerated/",
    "src/cold/models/ontology/files/formatted/",
    "src/cold/models/ontology/files/originals/",
]

def ensure_directories_exist(directories):
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"Created directory: {directory}")
        else:
            print(f"Directory already exists: {directory}")


def main():
    # Ensure required directories exist
    ensure_directories_exist(REQUIRED_DIRECTORIES)

    # Main logic
    ontology = load_ontology(ONTOLOGY_URL)
    classes = extract_classes(ontology)
    generate_pydantic_classes(classes, TEMPLATE_PATH, OUTPUT_DIR)


if __name__ == "__main__":
    main()
