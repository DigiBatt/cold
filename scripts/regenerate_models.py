import sys
import os
import json
import shutil
from owlready2 import locstr

# Add the src/ directory to sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))
print(sys.path)

from cold.ontology.importer import import_ontology
from cold.ontology.loader import load_ontology
from cold.ontology.extractor import extract_classes
from cold.ontology.formatter import format_ontology
from cold.models.generator import generate_pydantic_classes
from cold.utils.access import *


CLASSES_OUTPUT_DIR = "src/cold/models/autogenerated/"
TEMPLATE_PATH = "src/cold/models/templates/pydantic_template.jinja2"
#C:\Myenv\cold\src\cold\models\templates\pydantic_template.jinja2
#print("Current working directory:", os.getcwd())

if os.path.exists(CLASSES_OUTPUT_DIR):
    shutil.rmtree(CLASSES_OUTPUT_DIR)
os.makedirs(CLASSES_OUTPUT_DIR, exist_ok=True)

# Required directories
REQUIRED_DIRECTORIES = [
    "src/cold/models/autogenerated/",
    "src/cold/models/ontology/files/formatted/",
    "src/cold/models/ontology/files/originals/",
]

def ensure_directories_exist(directories):
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"Created directory: {directory}")
        else:
            print(f"Directory already exists: {directory}")


def main():
  
    # Ensure required directories exist
    ensure_directories_exist(REQUIRED_DIRECTORIES)

    # Import ontology urls from json
    with open(os.path.join(get_path_to_ontology(), "urls.json"), 'r') as f:
        url_dict = json.load(f)

    # Stage 1: Extract classes from all ontologies
    all_classes = []

    for url_key in url_dict.keys():
        print(f"Processing {url_key} ontology.")
        url = url_dict.get(url_key).get("url")
        original_file_name = url_dict.get(url_key).get("original_file_name")
        formatted_file_name = url_dict.get(url_key).get("formatted_file_name")

        original_file_path = os.path.join(
            get_path_to_ontology_files_originals(), original_file_name
        )
        formatted_file_path = os.path.join(
            get_path_to_ontology_files_formatted(), formatted_file_name
        )

        # Import and format the ontology
        import_ontology(url, original_file_path)
        format_ontology(original_file_path, formatted_file_path)

        # Load the ontology and extract classes
        ontology = load_ontology(formatted_file_path)
        # Check if the class exists in the ontology before modifying its prefLabel
        iri = "https://w3id.org/emmo#EMMO_f652e7d2_0b33_4d10_8d0f_2f70089982ba"
        if iri in ontology:
            cls = ontology[iri]
            cls.prefLabel = [locstr("hasIUPACName", "en")]
            print(f"Updated prefLabel for class {iri} to 'hasIUPACName'")

        classes = extract_classes(ontology)

        # Append extracted classes to the combined list
        all_classes.extend(classes)

    # Stage 2: Generate Pydantic classes
    generate_pydantic_classes(all_classes, TEMPLATE_PATH, CLASSES_OUTPUT_DIR)



if __name__ == "__main__":
    main()
