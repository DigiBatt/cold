import sys
import os
import json
import shutil
from owlready2 import locstr
from rdflib import Graph

# Add project root to sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))

import os
import importlib
import traceback
import re

MAX_ITERATIONS = 10


def test_all_imports(base_dir="cold/models/autogenerated", namespace="cold.models.autogenerated"):
    failures = []

    for root, _, files in os.walk(base_dir):
        for file in files:
            if file.endswith("Module.py"):
                rel_path = os.path.relpath(root, base_dir).replace(os.sep, ".")
                module_name = f"{namespace}.{rel_path}.{file[:-3]}"


                try:
                    importlib.import_module(module_name)
                except Exception as e:
                    tb = traceback.format_exc()
                    failures.append((module_name, tb))

    return failures


def fix_import_errors(base_dir, failures):
    mro_pattern = re.compile(r"Cannot create a consistent method resolution order.*for bases (.+)")
    circular_pattern = re.compile(r"cannot import name '(\w+)'")

    fixed_count = 0

    for mod, tb in failures:
        print(f"Analyzing: {mod}")

        file_path = os.path.join(*mod.split('.')) + ".py"

        if mro_match := mro_pattern.search(tb):
            bases = mro_match.group(1)
            print(f"  → MRO Issue with bases: {bases}")

            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()

            content = re.sub(
                r"class (\w+)\((.*?)\):",
                lambda m: f"class {m.group(1)}({m.group(2).split(',')[0]}):",
                content,
            )

            with open(file_path, "w", encoding="utf-8") as f:
                f.write(content)

            fixed_count += 1

        elif circular_match := circular_pattern.search(tb):
            bad_class = circular_match.group(1)
            print(f"  → Circular Import on: {bad_class}")

            with open(file_path, "r", encoding="utf-8") as f:
                lines = f.readlines()

            # Remove import line
            new_lines = [line for line in lines if f"import {bad_class}" not in line]

            # Remove all references to the class name
            cleaned_lines = []
            skip_block = False
            for line in new_lines:
                # Skip validator functions and class-level references to bad_class
                if bad_class in line:
                    if "@validator" in line or "def validate_" in line:
                        skip_block = True
                        continue
                    if f"Optional[Union[{bad_class}" in line or f"isinstance(item, {bad_class})" in line:
                        continue
                    if f"isinstance(value, {bad_class})" in line:
                        continue

                if skip_block:
                    if line.strip().startswith("def ") or line.strip() == "":
                        skip_block = False
                    continue

                cleaned_lines.append(line)

            with open(file_path, "w", encoding="utf-8") as f:
                f.writelines(cleaned_lines)

            fixed_count += 1


    return fixed_count


def resolve_import_issues_iteratively():
    for i in range(MAX_ITERATIONS):
        print(f"\n=== Iteration {i+1}/{MAX_ITERATIONS} ===")
        failures = test_all_imports()

        if not failures:
            print("All modules import cleanly!")
            return

        print(f"{len(failures)} modules failed import.")

        fixed_count = fix_import_errors("cold/models/autogenerated", failures)

        print(f"→ Fixed {fixed_count} classes this iteration.")
        print(f"→ Remaining import errors: {len(failures)}")

        if fixed_count == 0:
            print("No more automatic fixes possible.")
            return

    print("Reached maximum iteration limit — some issues may remain.")


# Usage
if __name__ == "__main__":
    print("Resolving import errors...")
    resolve_import_issues_iteratively()
    print("✅ Import resolving complete!")
