import os
import importlib
import traceback

AUTO_DIR = 'cold/models/autogenerated'
OUTPUT_FILE = 'mro_issues_report.txt'


def find_all_classes():
    classes = []
    import_errors = []

    for root, dirs, files in os.walk(AUTO_DIR):
        for file in files:
            if file.endswith('.py') and not file.startswith('__'):
                module_path = os.path.join(root, file).replace('/', '.').replace('\\', '.')
                module_name = module_path.removesuffix('.py')
                try:
                    mod = importlib.import_module(module_name)
                    for attr in dir(mod):
                        obj = getattr(mod, attr)
                        if isinstance(obj, type):
                            classes.append((module_name, attr, obj))
                except Exception as e:
                    tb = traceback.format_exc()
                    import_errors.append((module_name, str(e), tb))
    return classes, import_errors


def check_mro(classes):
    mro_issues = []
    for module_name, class_name, cls in classes:
        try:
            _ = cls.mro()
        except TypeError as e:
            mro_issues.append((module_name, class_name, str(e)))
        except Exception as e:
            tb = traceback.format_exc()
            mro_issues.append((module_name, class_name, f"Unexpected error:\n{tb}"))
    return mro_issues


if __name__ == "__main__":
    all_classes, import_errors = find_all_classes()
    mro_issues = check_mro(all_classes)

    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        if not import_errors and not mro_issues:
            print("No MRO or import issues found.")
            f.write("No MRO or import issues found.\n")
        else:
            if import_errors:
                print("Import Errors detected:")
                f.write("Import Errors detected:\n")
                for module_name, error, tb in import_errors:
                    line = f"- {module_name}: {error}"
                    print(line)
                    f.write(line + "\n")
                    f.write(tb + "\n")

            if mro_issues:
                print("\nMRO Issues detected:")
                f.write("\nMRO Issues detected:\n")
                for module_name, class_name, error in mro_issues:
                    line = f"- {module_name}.{class_name}: {error}"
                    print(line)
                    f.write(line + "\n")

    print(f"\nFull report written to {OUTPUT_FILE}")
