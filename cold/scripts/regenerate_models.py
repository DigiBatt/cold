import sys
import os
import json
import shutil
from owlready2 import locstr
from rdflib import Graph

# Ensure VSCode-friendly relative imports always work
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

# Paths
AUTO_DIR = os.path.join(os.path.dirname(__file__), '..', 'models', 'autogenerated')
TOP_LEVEL_INIT_PATH = os.path.join(os.path.dirname(__file__), '..', '__init__.py')

# Clean the autogenerated models directory
if os.path.exists(AUTO_DIR):
    print(f"Deleting all autogenerated models in {AUTO_DIR}")
    shutil.rmtree(AUTO_DIR)
os.makedirs(AUTO_DIR, exist_ok=True)

# Clean the top-level __init__.py (safe and robust)
if os.path.exists(TOP_LEVEL_INIT_PATH):
    print(f"Clearing existing {TOP_LEVEL_INIT_PATH} for regeneration.")
else:
    print(f"Creating empty {TOP_LEVEL_INIT_PATH}.")

with open(TOP_LEVEL_INIT_PATH, 'w', encoding='utf-8') as f:
    f.write('')  # Empty file


from cold.ontology.importer import import_ontology
from cold.ontology.loader import load_ontology
from cold.ontology.extractor import extract_classes
from cold.ontology.formatter import format_ontology
from cold.models.generator import generate_pydantic_classes, generate_top_level_init
from cold.utils.access import *

CLASSES_OUTPUT_DIR = "cold/models/autogenerated/"
TEMPLATE_PATH = "cold/models/templates/pydantic_template.jinja2"
INIT_FILE_PATH = os.path.join("cold", "__init__.py")


REQUIRED_DIRECTORIES = [
    "cold/models/autogenerated/",
    "cold/ontology/files/formatted/",
    "cold/ontology/files/originals/",
]

def ensure_directories_exist(directories):
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"Created directory: {directory}")

def main():
    ensure_directories_exist(REQUIRED_DIRECTORIES)

    with open(os.path.join(get_path_to_ontology(), "urls.json"), 'r') as f:
        url_dict = json.load(f)

    all_classes = []
    formatted_paths = []
    lumped_turtle = os.path.join(get_path_to_ontology_files_formatted(), "merged.ttl")

    for prefix, meta in url_dict.items():
        print(f"Processing {prefix} ontology.")
        original_path = os.path.join(get_path_to_ontology_files_originals(), meta["original_file_name"])
        formatted_path = os.path.join(get_path_to_ontology_files_formatted(), meta["formatted_file_name"])

        import_ontology(meta["url"], original_path)
        format_ontology(original_path, formatted_path)
        formatted_paths.append(formatted_path)

    g = Graph()
    for path in formatted_paths:
        g.parse(path, format="turtle")

    g.serialize(destination=lumped_turtle, format="turtle")

    ontology = load_ontology(lumped_turtle)

    for prefix, meta in url_dict.items():
        sub_ontology = load_ontology(os.path.join(get_path_to_ontology_files_formatted(), meta["formatted_file_name"]))
        extracted = extract_classes(sub_ontology)
        all_classes.extend([(cls, prefix) for cls in extracted])

    generated_classes = generate_pydantic_classes(all_classes, TEMPLATE_PATH, CLASSES_OUTPUT_DIR)

    generate_top_level_init(CLASSES_OUTPUT_DIR, generated_classes)

if __name__ == "__main__":
    main()
