import os
import sys
import importlib
import traceback
import re

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

BASE_DIR = "cold/models/autogenerated"
NAMESPACE = "cold.models.autogenerated"

MRO_PATTERN = re.compile(r"Cannot create a consistent method resolution order.*for bases (.+)")
CIRCULAR_PATTERN = re.compile(r"cannot import name '(\w+)'")

def test_all_imports():
    failures = []

    for root, _, files in os.walk(BASE_DIR):
        for file in files:
            if file.endswith("Module.py"):
                rel_path = os.path.relpath(root, "cold").replace(os.sep, ".")
                module_name = f"{NAMESPACE}.{rel_path}.{file[:-3]}"

                try:
                    importlib.import_module(module_name)
                except Exception:
                    tb = traceback.format_exc()
                    failures.append((module_name, tb))

    return failures


def classify_errors(failures):
    summary = {"MRO": [], "Circular": [], "Other": []}

    for mod, tb in failures:
        if MRO_PATTERN.search(tb):
            summary["MRO"].append((mod, tb))
        elif CIRCULAR_PATTERN.search(tb):
            summary["Circular"].append((mod, tb))
        else:
            summary["Other"].append((mod, tb))

    return summary


if __name__ == "__main__":
    print("Checking for import issues...")
    failures = test_all_imports()

    if not failures:
        print("âœ… All modules import cleanly!")
        sys.exit(0)

    print(f"Found {len(failures)} modules with import issues.")

    summary = classify_errors(failures)

    print(f"\nMRO Issues: {len(summary['MRO'])}")
    for mod, tb in summary["MRO"]:
        print(f"  {mod}")

    print(f"\nCircular Import Issues: {len(summary['Circular'])}")
    for mod, tb in summary["Circular"]:
        print(f"  {mod}")

    print(f"\nOther Errors: {len(summary['Other'])}")
    for mod, tb in summary["Other"]:
        print(f"  {mod}")

    print("\nFull details of first few errors:")

    for error_type, errors in summary.items():
        for mod, tb in errors[:3]:  # Only show first few
            print(f"\n=== {error_type} Error in {mod} ===")
            print(tb)
