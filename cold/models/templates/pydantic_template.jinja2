{% set imports = properties | map(attribute="range") | unique | reject("equalto", "str") | reject("equalto", None) | list %}

from __future__ import annotations
from typing import Optional, List, Union{% if imports %}, TYPE_CHECKING{% endif %}
from pydantic import BaseModel, Field

from cold.models.custom.LinkedDataModelModule import LinkedDataModel

{% for parent_class in parent_classes if parent_class != "BaseModel" %}
{% if parent_class in custom_models %}
from cold.models.custom.{{ parent_class }}Module import {{ parent_class }}
{% else %}
from .{{ parent_class }}Module import {{ parent_class }}
{% endif %}
{% endfor %}

{% if imports %}
if TYPE_CHECKING:
{% for imp in imports %}
{% if imp in custom_models %}
    from cold.models.custom.{{ imp }}Module import {{ imp }}
{% else %}
    from .{{ imp }}Module import {{ imp }}
{% endif %}
{% endfor %}
{% endif %}

{% if additional_imports %}
# Custom imports
{% for imp in additional_imports %}
{{ imp }}
{% endfor %}
{% endif %}


class {{ class_name }}({{ ', '.join(parent_classes) }}):
    """
    Class representing the `{{ class_name }}` entity, which inherits from:
    - {{ ', '.join(parent_classes) }}

    This class defines the following attributes:
    {% if properties %}
    {% for prop in properties %}
    - `{{ prop.name }}` (`Optional[{{ prop.range }}]`)
    {% endfor %}
    {% endif %}
    """
    class Config:
        arbitrary_types_allowed = True
        populate_by_name = True
        validate_assignment = True

    {% for prop in properties %}
    {{ prop.name }}: Optional[
        Union[
            List[Union[{{ prop.range }}]],
            {{ prop.range }}
        ]
    ] = Field(
        default=None,
        {% if prop.description %}description="{{ prop.description | escape }}",{% endif %}
        {% if prop.iri %}json_schema_extra={"iri": "{{ prop.iri }}"},{% endif %}
        alias="{% if prop.iri and 'schema.org' in prop.iri %}schema:{{ prop.name }}{% else %}{{ prop.name }}{% endif %}"
    )
    {% endfor %}

    {% if not properties %}
    pass
    {% endif %}
