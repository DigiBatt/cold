import sys
import os
import json
import shutil
from owlready2 import locstr
from rdflib import Graph


# Add the  directory to sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
print(sys.path)

from cold.ontology.importer import import_ontology
from cold.ontology.loader import load_ontology
from cold.ontology.extractor import extract_classes
from cold.ontology.formatter import format_ontology
from cold.models.generator import generate_pydantic_classes
from cold.utils.access import *



CLASSES_OUTPUT_DIR = "cold/models/autogenerated/"
TEMPLATE_PATH = "cold/models/templates/pydantic_template.jinja2"

if os.path.exists(CLASSES_OUTPUT_DIR):
    shutil.rmtree(CLASSES_OUTPUT_DIR)
os.makedirs(CLASSES_OUTPUT_DIR, exist_ok=True)

# Required directories
REQUIRED_DIRECTORIES = [
    "cold/models/autogenerated/",
    "cold/ontology/files/formatted/",
    "cold/ontology/files/originals/",
]

# Import ontology urls from json
with open(os.path.join(get_path_to_ontology(), "urls.json"), 'r') as f:
    url_dict = json.load(f)

# Stage 1: Extract classes from all ontologies
all_classes = []

# Paths and setup
formatted_paths = []
lumped_turtle = os.path.join(get_path_to_ontology_files_formatted(), "merged.ttl")

# Load as a single ontology
ontology = load_ontology(lumped_turtle)



# Get a class
cls = ontology.search_one(iri="https://w3id.org/emmo#EMMO_86ca9b93_1183_4b65_81b8_c0fcd3bba5ad")
print(f"Retrieved class: {cls}")
print(f"Class IRI: {cls.iri}")

# ✅ Call the method!
try:
    onto_obj = cls.ontology()  # ← ← ← fix is here
    print("✅ Successfully accessed ontology object")
    print(f"Ontology contains {len(onto_obj.object_properties())} object properties.")
except Exception as e:
    print(f"❌ Failed to access ontology from class: {e}")