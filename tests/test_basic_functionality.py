import os
from cold.ontology.loader import load_ontology
from cold.ontology.extractor import extract_classes, extract_properties
from cold.models.generator import generate_pydantic_classes

def test_load_ontology():
    ontology = load_ontology()
    assert ontology is not None, "Failed to load ontology"

def test_extract_classes():
    ontology = load_ontology()
    classes = extract_classes(ontology, max_classes=5)
    assert len(classes) > 0, "No classes extracted from ontology"

def test_generate_pydantic_classes(tmpdir):
    ontology = load_ontology()
    classes = extract_classes(ontology, max_classes=1)
    template_path = "src/cold/models/templates/pydantic_template.jinja2"
    output_dir = tmpdir.mkdir("autogenerated")

    generate_pydantic_classes(classes, template_path, str(output_dir))

    files = os.listdir(str(output_dir))
    assert len(files) > 0, "No models generated"
    assert "__init__.py" in files, "Lazy loader not generated"
